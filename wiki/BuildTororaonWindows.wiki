#summary Building Torora on Windows

= Install the following prerequisites first: =

  # [http://go.microsoft.com/fwlink/?LinkId=51410 Visual C++ Express 2005]
  # [http://download.microsoft.com/download/7/7/3/7737290f-98e8-45bf-9075-85cc6ae34bf1/VS80sp1-KB926748-X86-INTL.exe Microsoft Visual C++ Express 2005 Service Pack 1]
  # [http://www.microsoft.com/downloads/details.aspx?FamilyID=90e2942d-3ad1-4873-a2ee-4acc0aace5b6&displaylang=en If you are building from Vista, install Service Pack 1 Update for Windows Vista.]
  # [http://www.microsoft.com/downloads/details.aspx?familyid=0baf2b35-c656-4969-ace8-e4c0c0716adb&displaylang=en Install the Windows Server 2003 R2 Platform SDK]
  # [http://msdn.microsoft.com/en-us/library/ms235626(VS.80).aspx Follow steps 2 and 3 of “How to: Use Visual C++ Express Edition with the Microsoft Platform SDK.]
  # [http://www.activestate.com/store/download.aspx?prdGUID=81fbce82-6bd5-49bc-a915-08d58c2648ca ActivePerl]
  # [http://www.openssl.org/source/ OpenSSl]
  # The following external GNU tools are needed from the GnuWin32 Project:
   * [http://gnuwin32.sourceforge.net/downlinks/bison.php Bison]
   * [http://gnuwin32.sourceforge.net/downlinks/gperf.php GPerf]
   * [http://gnuwin32.sourceforge.net/downlinks/flex.php Flex]
   * [http://gnuwin32.sourceforge.net/downlinks/libiconv.php LibIconv]
  # [http://www.qtsoftware.com/downloads/sdk-windows-cpp QT SDK (and QT Creator)]
  # [http://code.google.com/p/msysgit/ Git for Windows]
  # [http://subversion.tigris.org/getting.html#windows SVN for Windows]
  # [http://nsis.sourceforge.net/Download Download NSIS]
  # [http://nsis.sourceforge.net/KillProcDLL_plug-in Download the KillProcDLL_plug-in]

= Details =

== Step 1: Build OpenSSl ==

  # [http://go.microsoft.com/fwlink/?LinkId=51410 Visual C++ Express 2005]
  # [http://download.microsoft.com/download/7/7/3/7737290f-98e8-45bf-9075-85cc6ae34bf1/VS80sp1-KB926748-X86-INTL.exe Microsoft Visual C++ Express 2005 Service Pack 1]
  # [http://www.microsoft.com/downloads/details.aspx?FamilyID=90e2942d-3ad1-4873-a2ee-4acc0aace5b6&displaylang=en If you are building from Vista, install Service Pack 1 Update for Windows Vista.]
  # [http://www.microsoft.com/downloads/details.aspx?familyid=0baf2b35-c656-4969-ace8-e4c0c0716adb&displaylang=en Install the Windows Server 2003 R2 Platform SDK]
  # [http://msdn.microsoft.com/en-us/library/ms235626(VS.80).aspx Follow steps 2 and 3 of “How to: Use Visual C++ Express Edition with the Microsoft Platform SDK.]
  # [http://www.activestate.com/store/download.aspx?prdGUID=81fbce82-6bd5-49bc-a915-08d58c2648ca ActivePerl]
  # [http://www.openssl.org/source/ OpenSSl]
  # Start Visual C++ Express 2005
  # Click Tools->Visual C++ Command Prompt
  # cd c:\location\of\extracted\openssl
  # Build from the Visual C++ command prompt:
{{{
    openssl_source_directory> perl Configure VC-WIN32
    openssl_source_directory> ms\do_ms
}}}
  * Note: You can also try ms\do_masm. Only ms\do_ms worked for me.
{{{
    openssl_source_directory> nmake -f ms\ntdll.mak
}}}

== Step 2: Fetch Torora Sources, Fetch and Patch Webkit ==

  # [http://code.google.com/p/msysgit/ Download Git for Windows]
  # [http://subversion.tigris.org/getting.html#windows Download SVN for Windows]
  # [http://gnuwin32.sourceforge.net/downlinks/patch.php Download patch.exe for Windows]
  # Launch Git from the start menu.
  # Make sure the GnuWin32 packages are in your PATH: `set PATH=C:\program files\gnuwin32;%PATH`:
{{{
    $ cd $HOMEDIR
    $ git clone git://github.com/mwenge/torora.git
    $ svn checkout http://svn.webkit.org/repository/webkit/trunk $HOME/WebKit
    $ cd $HOMEDIR/WebKit
    $ patch -p0 < ..\torora\doc\webkit-svn.patch
}}}

== Step 3: Build Patched Webkit ==

  # The following external GNU tools are needed from the GnuWin32 Project:
   * [http://gnuwin32.sourceforge.net/downlinks/bison.php Bison]
   * [http://gnuwin32.sourceforge.net/downlinks/gperf.php GPerf]
   * [http://gnuwin32.sourceforge.net/downlinks/flex.php Flex]
   * [http://gnuwin32.sourceforge.net/downlinks/libiconv.php LibIconv]
  # [http://www.qtsoftware.com/downloads/sdk-windows-cpp QT SDK (and QT Creator)]
  # Make sure the GnuWin32 packages are in your PATH as well as Perl.
  # You also need to have %QTDIR% set and have %QTDIR%\bin in your PATH.
  # Open for example a Qt Command Prompt from the Start Menu. `Click Start->Program Files->Qt->QT Command Prompt`
  # Change into the WebKit source tree: `cd c:\location\of\webkit`
  # Build the patched webkit (release mode):
    `$perl WebKitTools\Scripts\build-webkit --qt --release`


== Step 4: Build Torora in Qt Creator ==

  # Open up Qt Creator
  # Find the torora.pro file in your clone of the torora git repository and open it.
  # The git repo contains a torora.pro.user which QT will use to set build environment variables. In order for the Torora build to pick up the patched webkit you built earlier and in order to build Torora with the proper configuration you will need to ensure that at least the following are set correctly in the 'Projects' section of QT Creator.
  # In the list below `C:\users\robert\WebKit-SVN-source\webkit\WebKitBuild\Release\lib` is    the location of the patched Webkit build. It needs to come at the start of the PATH variable so that the patched webkit is picked up rather than the one that ships with your QT SDK. Also note the presence of the location of the OpenSSL libraries you built in Step 1: `C:\Users\robert\Documents\Development\openssl-0.9.8j\out32dll`
{{{
PATH=C:\users\robert\WebKit-SVN-source\webkit\WebKitBuild\Release\lib;c:\Qt\2009.01\mingw\bin;c:\Qt\2009.01\qt\bin;C:\Perl\site\bin;C:\Perl\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Program Files\Intel\DMIX;C:\Program Files\ATI Technologies\ATI.ACE\Core-Static;C:\Program Files\Common Files\Roxio Shared\10.0\DLLShared\;C:\Program Files\Common Files\Roxio Shared\DLLShared\;C:\Program Files\Common Files\Roxio Shared\DLLShared\;C:\Program Files\Common Files\Roxio Shared\10.0\DLLShared\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\Program Files\Git\bin;C:\Users\robert\Documents\Development\openssl-0.9.8j\out32dll
}}}
  # Again, the location of your patched webkit build needs to preced the location of the QT SDK.
{{{
QTDIR=C:\Users\robert\WebKit-SVN-source\webkit;C:/Qt/2009.01/qt
}}}
  # This is needed for building against the patched webkit build. 'C:\Users\robert\WebKit-SVN-source\webkit' is the location of the webkit svn repo you downloaded.
{{{
  QT_WEBKIT=webkit_trunk
  WEBKITDIR=C:\Users\robert\WebKit-SVN-source\webkit
}}}
  # In the projects section, click on the QMake item in the list. Add the following arguments for qmake to the existing list:
{{{
    DEFINES+=TORORA_WEBKIT_BUILD DEFINES+=TORORA
}}}
  # Click Build->Run Qmake
  # Click Build->Build All
  # Click Ctrl->r to run and test the torora executable.

== Step 5: Creating the NSIS Installer ==

  # [http://nsis.sourceforge.net/Download Download NSIS]
  # [http://nsis.sourceforge.net/KillProcDLL_plug-in Download the KillProcDLL_plug-in and move the appropriate DLL into the NSIS plugins directory.]
  # Edit the hard-coded directory paths in arora_source_directory\windowsinstaller.nsi to reflect the appropriate location of the libraries installed above.
  # In the following ones just change 'C:\Qt\2009.01\' to point to the location of the QT SDK you downloaded.
{{{
  File "C:\Qt\2009.01\mingw\bin\mingwm10.dll"
  File "C:\Qt\2009.01\qt\bin\QtCore4.dll"
  File "C:\Qt\2009.01\qt\bin\QtGui4.dll"
  File "C:\Qt\2009.01\qt\bin\QtNetwork4.dll"
  File "C:\Qt\2009.01\bin\phonon4.dll"
}}}
  # Change '"C:\Users\robert\WebKit-SVN-source\webkit\WebKitBuild\Release\lib\' to reflect the location of the webkit svn repo you downloaded and built.
{{{
  File "C:\Users\robert\WebKit-SVN-source\webkit\WebKitBuild\Release\lib\QtWebKit4.dll"
}}}
  # Change 'C:\Users\robert\Documents\Development\openssl-0.9.8j\out32dll' to reflect the location of the openssl source you downloaded and built.
{{{
  File "C:\Users\robert\Documents\Development\openssl-0.9.8j\out32dll\ssleay32.dll"
  File "C:\Users\robert\Documents\Development\openssl-0.9.8j\out32dll\libeay32.dll"
}}}
  # Compile torora_source_directory\windowsinstaller.nsi with the NSIS compiler by right clicking on the file and choosing "Compile NSIS Script" or by using the NSIS compiler interface directly.
  # Run the output installer file titled "Torora Snapshot (Date) Installer.exe".